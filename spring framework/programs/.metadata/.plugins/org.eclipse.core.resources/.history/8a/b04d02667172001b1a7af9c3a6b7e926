package com.example;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.server.ResponseStatusException;

@RestController
@RestControllerAdvice
@RequestMapping("/users")
public class UserController {
	List<User> users;
	{
		users = new ArrayList<User>();
		users.add(new User(101, "adit1"));
		users.add(new User(102, "adit2"));
		users.add(new User(103, "adit3"));
		users.add(new User(104, "adit4"));
	}
	
	@RequestMapping
	public ResponseEntity<List<User>> getUsers() {
//		System.out.println(10/0);
		return  ResponseEntity.status(HttpStatus.FOUND).body(users);
	}
	
	@RequestMapping("/{id}")
	public User getUsers(@PathVariable int id) throws UserException {
		Optional<User> user = users
		.stream()
		.filter(u -> u.getId() == id)
		.findFirst();
		if(! user.isPresent()) {
			throw new ResponseStatusException("given id not found in database", HttpStatus.NO_CONTENT);
		}
		return user.get();
		
	}
	
	@PostMapping
	public ResponseEntity<String> postUsers(@RequestBody User user) {
		//requestbody --> data from request will be mapped to user object
		users.add(user);
		return  ResponseEntity.status(HttpStatus.CREATED).body("successfully added the record");
	}
	
	@DeleteMapping("/{id}")
	public ResponseEntity<String> deleteUsers(@PathVariable int id) {
		boolean isdeleted = users.removeIf(u -> u.getId() == id);
		if(isdeleted) {
			return  ResponseEntity.status(HttpStatus.OK).body("successfully deleted the record");
		}else {
			return  ResponseEntity.status(HttpStatus.NOT_FOUND).body("could not delete the record");
		}
	}
	
	@PutMapping("/{id}")
	public String upateUser(@RequestBody User user, @PathVariable int id) {
		users.removeIf(u -> u.getId() == id);
		users.add(user);
		return "successfully updated the record";
	}
}
