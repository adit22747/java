package com.cybage;

import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.EnabledForJreRange;
import org.junit.jupiter.api.condition.EnabledOnJre;
import org.junit.jupiter.api.condition.EnabledOnOs;
import org.junit.jupiter.api.condition.JRE;
import org.junit.jupiter.api.condition.OS;

class ArithmeticTest {

	@BeforeAll // it will execute at the start of unit testing
	static void setup() {
		System.out.println("this will execute at the start of testing");
	}

	@BeforeEach
	void beforeEveryUnitTestCase() {
		System.out.println("it will execute before every unit test case");
	}

	@AfterEach
	void afterEveryUnitTestCase() {
		System.out.println("it will execute after every unit test case");
	}

	Arithmetic arithmetic = new Arithmetic();

	@Test // @Test --> we are writing this method for unit testing...
	void testAdd() {
		int actual = arithmetic.add(10, 20);
		int expected = 30;

		assertEquals(expected, actual); // testing for correct result
		assertEquals(0, arithmetic.add(0, 0));
		assertEquals(-30, arithmetic.add(-10, -20));
		assertEquals(10, arithmetic.add(-10, 20));
	}

	@Test // @Test --> we are writing this method for unit testing...
	void testSub() {
		int actual = arithmetic.sub(10, 20);
		int expected = -10;

		assertEquals(expected, actual); // testing for correct result
		assertEquals(0, arithmetic.sub(0, 0));
		assertEquals(10, arithmetic.sub(-10, -20));
		assertEquals(-30, arithmetic.sub(-10, 20));
	}

	@Test
	void testArray() {
		int expected[] = { 1, 2, 3, 4, 5 };
		int actual[] = { 1, 2, 3, 4, 5 };
		assertArrayEquals(expected, actual);
	}

	@Test
	void testCollection() {
		List<Integer> expected = new ArrayList<>();
		expected.add(10);
		expected.add(20);
		expected.add(30);
		expected.add(40);

		List<Integer> actual = Arrays.asList(10, 20, 30, 40);
		assertIterableEquals(expected, actual);
	}

	@Test
	void failTest() {
		fail();
	}

	// conditional test
	@Test
	@EnabledOnOs({ OS.WINDOWS, OS.LINUX })
	void testOS() {
		System.out.println("it will work on windows or linux os.");
	}

	@Test
	@EnabledOnJre({JRE.JAVA_8})
	void testJre() {
		System.out.println("it will work only on 8.");
	}

	@AfterAll
	static void finish() {
		System.out.println("we have finished all test case");
	}
}